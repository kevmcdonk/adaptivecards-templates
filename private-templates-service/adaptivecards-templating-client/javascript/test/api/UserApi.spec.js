/*
 * adaptivecards-templating-service-javascript-sdk
 * Adaptive Cards Templating Service API definition.
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.12
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.AdaptivecardsTemplatingServiceJavascriptSdk);
  }
}(this, function(expect, AdaptivecardsTemplatingServiceJavascriptSdk) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new AdaptivecardsTemplatingServiceJavascriptSdk.UserApi();
  });

  describe('(package)', function() {
    describe('UserApi', function() {
      describe('userDelete', function() {
        it('should call userDelete successfully', function(done) {
          // TODO: uncomment userDelete call and complete the assertions
          /*

          instance.userDelete(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdaptivecardsTemplatingServiceJavascriptSdk.User);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.authId).to.be.a('string');
            expect(data.authId).to.be("");
            expect(data.issuer).to.be.a('string');
            expect(data.issuer).to.be("");
            {
              let dataCtr = data.team;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.org;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
      describe('userGet', function() {
        it('should call userGet successfully', function(done) {
          // TODO: uncomment userGet call and complete the assertions
          /*

          instance.userGet(function(error, data, response) {
            if (error) {
              done(error);
              return;
            }
            // TODO: update response assertions
            expect(data).to.be.a(AdaptivecardsTemplatingServiceJavascriptSdk.User);
            expect(data.id).to.be.a('string');
            expect(data.id).to.be("");
            expect(data.authId).to.be.a('string');
            expect(data.authId).to.be("");
            expect(data.issuer).to.be.a('string');
            expect(data.issuer).to.be("");
            {
              let dataCtr = data.team;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }
            {
              let dataCtr = data.org;
              expect(dataCtr).to.be.an(Array);
              expect(dataCtr).to.not.be.empty();
              for (let p in dataCtr) {
                let data = dataCtr[p];
                expect(data).to.be.a('string');
                expect(data).to.be("");
              }
            }

            done();
          });
          */
          // TODO: uncomment and complete method invocation above, then delete this line and the next:
          done();
        });
      });
    });
  });

}));
